// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String          @id @default(uuid())
  fullName              String?
  email                 String
  password              String
  phone                 String?
  aboutMe               String?
  nickName              String?
  birth                 DateTime?
  address               String?
  posts                 Post[]
  followers             FollowShip[]    @relation("Followings")
  followings            FollowShip[]    @relation("Followers")
  postShares            PostShare[]
  comments              Comment[]
  reactions             Reaction[]
  images                Image[]
  roles                 Role[]
  Room                  RoomMessage[]
  Messages              Messages[]
  created_at            DateTime?       @default(now())
  updated_at            DateTime?       @updatedAt
  refreshTokenJWT       String?         @db.Text
  expriedTokenJWT       DateTime?
  Target                Target[]
  RequestFollow         RequestFollow[] @relation("RequestFollow")
  AcceptOrCancelRequest RequestFollow[] @relation("AcceptOrCancelRequest")
}

model ActionUser {
  id         String  @id @default(uuid())
  actionCode String
  idTarget   String
  target     Target? @relation(fields: [idTarget], references: [id])
}

model Target {
  id              String       @id @default(uuid())
  content         String?
  idTargetAccount String?
  targetAccount   Account?     @relation(fields: [accountId], references: [id])
  accountId       String?
  ActionUser      ActionUser[]
}

model SessionAccount {
  id                    String    @id @default(uuid())
  accessTokenJWT        String?   @db.Text
  refreshTokenJWT       String?   @db.Text
  expriedAccessTokenJWT DateTime?
}

model RoomMessage {
  id            String     @id @default(uuid())
  accountInRoom Account[]
  Messages      Messages[]
  created_at    DateTime?  @default(now())
  updated_at    DateTime?  @updatedAt
}

model Messages {
  id         String      @id @default(uuid())
  ownerId    String
  owner      Account     @relation(fields: [ownerId], references: [id])
  roomId     String
  room       RoomMessage @relation(fields: [roomId], references: [id])
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
}

model Role {
  id              String    @id @default(uuid())
  nameRole        String
  descriptionRole String
  account         Account[]
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model RequestFollow {
  id        String  @id @default(uuid())
  senderId  String
  sender    Account @relation("RequestFollow", fields: [senderId], references: [id])
  reciverId String
  reciver   Account @relation("AcceptOrCancelRequest", fields: [reciverId], references: [id])
}

model FollowShip {
  id          String   @id @default(uuid())
  follower    Account  @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   Account  @relation("Followings", fields: [followingId], references: [id])
  followingId String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  piority     Int?
}

model Post {
  id               String         @id @default(uuid())
  contentText      String
  accountId        String
  totalReaction    Int?
  totalComment     Int?
  totalShare       Int?
  account          Account        @relation(fields: [accountId], references: [id])
  postShares       PostShare[]
  comments         Comment[]
  reactions        Reaction[]
  images           Image[]
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  permissionPostId String?
  permissionPost   PermisionPost? @relation(fields: [permissionPostId], references: [id])
}

model PermisionPost {
  id          String @id @default(uuid())
  code        String
  description String
  Post        Post[]
}

model Image {
  id          String     @id @default(uuid())
  path        String
  accountId   String
  postId      String
  account     Account    @relation(fields: [accountId], references: [id])
  post        Post       @relation(fields: [postId], references: [id])
  typeImage   TypeImage? @relation(fields: [typeImageId], references: [id])
  typeImageId String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model TypeImage {
  id            String   @id @default(uuid())
  typeImageName String
  image         Image[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model PostShare {
  id         String     @id @default(uuid())
  accountId  String
  postId     String
  content    String
  account    Account    @relation(fields: [accountId], references: [id])
  post       Post       @relation(fields: [postId], references: [id])
  comments   Comment[]
  reactions  Reaction[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Comment {
  id           String     @id @default(uuid())
  contentCmt   String
  accountId    String
  postId       String
  account      Account    @relation(fields: [accountId], references: [id])
  post         Post       @relation(fields: [postId], references: [id])
  postSharedId String?
  postShared   PostShare? @relation(fields: [postSharedId], references: [id])
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model Reaction {
  id          String     @id @default(uuid())
  accountId   String
  account     Account    @relation(fields: [accountId], references: [id])
  postId      String
  post        Post       @relation(fields: [postId], references: [id])
  postShareId String?
  postShare   PostShare? @relation(fields: [postShareId], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model Notification {
  id                   String           @id @default(uuid())
  accountId            String
  postId               String?
  postShareId          String?
  commentId            String?
  reactionId           String?
  followerId           String?
  messageNotifications String?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  typeNotificationId   String
  typeNotification     TypeNotification @relation(fields: [typeNotificationId], references: [id])
}

model TypeNotification {
  id           String         @id @default(uuid())
  typeName     String
  description  String
  notification Notification[]
}

model Feature {
  id                String   @id @default(uuid())
  name              String
  thumbnailFileName String
  url               String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model TabMenu {
  id      String @id @default(uuid())
  name    String
  iconUrl String
  url     String
}

model HotContent {
  id                String   @id @default(uuid())
  title             String
  thumbnailFileName String
  url               String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}
